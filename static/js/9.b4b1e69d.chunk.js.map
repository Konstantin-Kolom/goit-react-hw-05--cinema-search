{"version":3,"sources":["utilits/api-utils.js","utilits/muvie-api.js","views/css/MovieDetailsPage.module.css","views/NotFondView.jsx","views/MovieDetailsPageViews.jsx"],"names":["API_KEY","URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchPopularDay","fetchSearchMovies","searchValue","fetchMovieId","id","fetchActors","muvieid","fetchReviews","module","exports","NotFondView","Cast","lazy","Reviews","MovieDetailsPageViews","useState","movie","setMuvie","error","setError","useRouteMatch","path","useParams","location","useLocation","history","useHistory","handleClick","push","state","from","useEffect","fetchApi","then","data","catch","name","title","poster_path","vote_average","overview","genres","type","onClick","className","s","button","size","buttonText","boxCard","src","alt","loading","img","map","genre","fallback","to","pathname","link","activeClassName","linkActive"],"mappings":"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","file":"static/js/9.b4b1e69d.chunk.js","sourcesContent":["export const API_KEY = '1cecc067256bce66d88819c359ab872b';\r\nexport const URL = 'https://api.themoviedb.org/3/';\r\n","import { URL, API_KEY } from './api-utils';\r\n\r\nasync function fetchWithErrorHandling(url = '', config = {}) {\r\n  const response = await fetch(url, config);\r\n  return response.ok ? await response.json() : Promise.reject(new Error('Not found'));\r\n}\r\n\r\n// Популярные за день\r\nexport function fetchPopularDay() {\r\n  return fetchWithErrorHandling(`${URL}trending/all/day?api_key=${API_KEY}`);\r\n}\r\n\r\n// По ключевому слову\r\nexport function fetchSearchMovies(searchValue) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchValue}&page=1&include_adult=false`,\r\n  );\r\n}\r\n\r\n// Один фильм по ID\r\nexport function fetchMovieId(id) {\r\n  return fetchWithErrorHandling(`${URL}movie/${id}?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\n// Актерский состав фильма\r\nexport function fetchActors(muvieid) {\r\n  return fetchWithErrorHandling(`${URL}movie/${muvieid}/credits?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\n// Отзывы\r\nexport function fetchReviews(muvieid) {\r\n  return fetchWithErrorHandling(\r\n    `${URL}movie/${muvieid}/reviews?api_key=${API_KEY}&language=en-US&page=1`,\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"MovieDetailsPage_button__19PXw\",\"buttonText\":\"MovieDetailsPage_buttonText__2OjxA\",\"boxCard\":\"MovieDetailsPage_boxCard__17EwE\",\"img\":\"MovieDetailsPage_img__3ugFU\",\"link\":\"MovieDetailsPage_link__1vdbg\",\"linkActive\":\"MovieDetailsPage_linkActive__iMSg7\"};","export function NotFondView() {\r\n  return <h1>Sorry, we have no information about this movie :( </h1>;\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport {\r\n  Route,\r\n  NavLink,\r\n  useHistory,\r\n  useParams,\r\n  useRouteMatch,\r\n  useLocation,\r\n} from 'react-router-dom';\r\n\r\nimport { lazy, Suspense } from 'react';\r\nimport { HiOutlineArrowCircleLeft } from 'react-icons/hi';\r\nimport { SpinnerLoader } from '../components/Loader/Loader';\r\n\r\nimport { NotFondView } from './NotFondView';\r\n\r\nimport * as fetchApi from '../utilits/muvie-api';\r\nimport s from './css/MovieDetailsPage.module.css';\r\n\r\nconst Cast = lazy(() => import('../components/Cats/Cast' /* webpackChunkName: \"cast\" */));\r\nconst Reviews = lazy(() =>\r\n  import('../components/Reviews/Reviews' /* webpackChunkName: \"reviews\" */),\r\n);\r\n\r\nexport default function MovieDetailsPageViews() {\r\n  const [movie, setMuvie] = useState('');\r\n  const [error, setError] = useState(false);\r\n\r\n  const { url, path } = useRouteMatch();\r\n  const { muvieid } = useParams();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  function handleClick() {\r\n    history.push(location.state?.from ? location.state.from : '/');\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchApi\r\n      .fetchMovieId(muvieid)\r\n      .then(data => {\r\n        setMuvie(data);\r\n      })\r\n      .catch(() => setError(true));\r\n  }, [muvieid]);\r\n\r\n  const { name, title, poster_path, vote_average, overview, genres } = movie;\r\n\r\n  if (movie !== '') {\r\n    return (\r\n      <div>\r\n        <button type=\"button\" onClick={handleClick} className={s.button}>\r\n          <HiOutlineArrowCircleLeft size=\"20px\" /> <span className={s.buttonText}> Go back</span>\r\n        </button>\r\n\r\n        <div>\r\n          <div className={s.boxCard}>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w300${poster_path}`}\r\n              alt=\"poster\"\r\n              loading=\"lazy\"\r\n              className={s.img}\r\n            />\r\n            <div>\r\n              <h2 className=\"title\">\r\n                {name}\r\n                {title}\r\n              </h2>\r\n              <p>User score: {vote_average * 10}%</p>\r\n              <h3>Overview:</h3> <p>{overview}</p>\r\n              <h4>Genres: </h4>\r\n              <p>\r\n                {genres.map(genre => (\r\n                  <span key={genre.id}>{genre.name}</span>\r\n                ))}\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <h4>Additional information</h4>\r\n            <ul>\r\n              <Suspense fallback={<SpinnerLoader />}>\r\n                <li>\r\n                  <NavLink\r\n                    to={{\r\n                      pathname: `${url}/cast`,\r\n                      state: { from: location.state.from },\r\n                    }}\r\n                    className={s.link}\r\n                    activeClassName={s.linkActive}\r\n                  >\r\n                    Cast\r\n                  </NavLink>\r\n                </li>\r\n                <li>\r\n                  <NavLink\r\n                    to={{\r\n                      pathname: `${url}/reviews`,\r\n                      state: { from: location.state.from },\r\n                    }}\r\n                    className={s.link}\r\n                    activeClassName={s.linkActive}\r\n                  >\r\n                    Reviews\r\n                  </NavLink>\r\n                </li>\r\n              </Suspense>\r\n\r\n              <Route path={`${path}/cast`}>\r\n                <Cast />\r\n              </Route>\r\n\r\n              <Route path={`${path}/reviews`}>\r\n                <Reviews />\r\n              </Route>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (movie === '' && error === false) {\r\n    return <SpinnerLoader />;\r\n  }\r\n\r\n  if (movie === '' && error === true) {\r\n    return (\r\n      <>\r\n        <button type=\"button\" onClick={handleClick} className={s.button}>\r\n          <HiOutlineArrowCircleLeft size=\"20px\" /> <span className={s.buttonText}> Go back</span>\r\n        </button>\r\n        <NotFondView />\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}